<?xml version="1.0" encoding="utf-8"?>

<!--
    NOTE 1
    make sure to include the default namespace so that visual studio
    will turn on intellisense for this nant build file 
    
    NOTE 2
    for non .NET developers: for all intents and purpose a solution in 
    VisualStudio (VS) is the same thing as a top-level project in most other
    languages, and VS project is the same as a package. in order to make it 
    easier for communicate amonst .NET developers working with both VS and
    NAnt, this NAnt build file will refer to the top-level project as a solution
    and packages as projects.
-->
<project xmlns="http://nant.sourceforge.net/release/latest/nant.xsd">

    <!-- **************************** SWITHCES ******************************-->

    <!--
        this property is set to true if this build script is being executed
        in a teamcity environment; otherwise it is not set at all. the existence
        of this property allows any part of the script to determine if it is
        being executed inside a teamcity build environment by using the
        following function call:
        
        ${property::exists('teamcity')}
    -->
    <if test="${property::exists('teamcity.projectName')}">
        <property name="teamcity"
                  value="true"/>
    </if>

    <!-- *********************** SOLUTION PROPERTIES *********************** -->

    <!-- the descriptive title of the solution -->
    <property name="sol.title"
              value="StyleCopCmd"/>

    <!-- 
        the solution's name. this is generally in the unix format (short)
    -->
    <property name="sol.name"
              value="StyleCopCmd"/>

    <!-- the solution's name in standard unix format (think short) -->
    <property name="sol.name.unix"
              value="${sol.name}"/>

    <!-- the description of the solution -->
    <property name="sol.description"
              value="StyleCopCmd provides a command-line interface and NAnt task to StyleCop"/>

    <!-- *********************** SOLUTION PROPERTIES *********************** -->


    <!-- *************************** DIRECTORIES *************************** -->

    <!-- directory for configuration files -->
    <property name="conf"
              value="conf"/>

    <!-- directory for distribution files -->
    <property name="dist"
              value="dist"/>

    <!-- directory for build output -->
    <property name="build"
              value="build"/>

    <!-- directory for documentation files -->
    <property name="docs"
              value="docs"/>

    <!-- directory for source files -->
    <property name="src"
              value="src"/>

    <!-- directory for unit tests -->
    <property name="test"
              value="test"/>

    <!-- directory for resource and localization files -->
    <property name="res"
              value="res"/>

    <!-- directory for libraries -->
    <property name="lib"
              value="lib"/>

    <!-- directory for sql scripts -->
    <property name="sql"
              value="sql"/>

    <!-- directory for tools -->
    <property name="tools"
              value="tools"/>

    <!-- directory for inc -->
    <property name="inc"
              value="inc"/>

    <!-- *************************** DIRECTORIES *************************** -->


    <!-- ***************************** VERSION ******************************-->

    <!-- 
        the solution's build number / version. get it from the conf/build.num
        file if it exists, but override it with the property build.num that
        the CI server sets
    -->
    <property name="sol.version"
              value="0.0.0.0"/>
    <if test="${file::exists('../../' + conf + '/build.num')}">
        <loadfile property="sol.version"
                  file="../../${conf}/build.num" />
    </if>
    <if test="${file::exists(conf + '/build.num')}">
        <loadfile property="sol.version"
                  file="${conf}/build.num" />
    </if>
    <if test="${property::exists('build.number')}">
        <property name="sol.version"
                  value="${build.number}"/>
    </if>

    <!-- ***************************** VERSION ******************************-->


    <!-- ****************************** TOOLS ****************************** -->

    <!--
        this is the directory for all of the tools needed to build, test,
        document, and distribute this application. this property is set to
        ${tools} or ../../${tools} depending upon which build script includes
        this properties file
    -->
    <property name="tools.dir"
              value="${tools}"/>
    <if test="${not directory::exists(tools.dir)}">
        <property name="tools.dir"
                  value="../../${tools}"/>
    </if>

    <if test="${environment::variable-exists('TOOLS_DOTNET')}">
        <property
            name="tools.dir"
            value="${environment::get-variable('TOOLS_DOTNET')}" />
    </if>

    <!-- nant -->
    <property name="tools.nant.basedir"
              value="nant-0.86-beta1" />

    <!-- ncover -->
    <property name="tools.ncover.basedir"
              value="ncover-2.1"/>

    <!-- fxcop -->
    <property name="tools.fxcop.basedir"
              value="fxcop-1.36-beta2"/>

    <!-- stylecopcmd -->
    <property name="tools.stylecopcmd.basedir"
              value="stylecopcmd"/>

    <!-- doxygen -->
    <property name="tools.doxygen.basedir"
              value="doxygen" />

    <!-- ndepend -->
    <property name="tools.ndepend.basedir"
              value="ndepend" />

    <!-- nunit -->
    <property name="tools.nunit.basedir"
              value="nunit-2.4.8-net-2.0" />

    <!--
        this is a useful patternset that includes all of
        the tool directories. these directories will be
        copied to this solutions sources distribution package
    -->
    <patternset id="tools.default">
        <include name="${tools.nant.basedir}/**"/>
        <include name="${tools.doxygen.basedir}/**"/>
        <include name="${tools.fxcop.basedir}/**"/>
        <include name="${tools.ncover.basedir}/**"/>
        <include name="${tools.ndepend.basedir}/**"/>
        <include name="${tools.stylecopcmd.basedir}/**"/>
        <include name="${tools.nunit.basedir}/**"/>
    </patternset>

    <!-- ****************************** TOOLS ****************************** -->


    <!-- ******************************* LIB ******************************* -->

    <property name="lib.dir"
              value="../../${lib}"/>
    <if test="${environment::variable-exists('LIB_DOTNET')}">
        <property
            name="lib.dir"
            value="${environment::get-variable('LIB_DOTNET')}" />
    </if>

    <!-- NUnit -->
    <property name="lib.nunit.basedir"
              value="nunit-2.4.8-net-2.0" />
    <patternset id="lib.nunit">
        <include name="${lib.nunit.basedir}/nunit.framework.dll"/>
    </patternset>

    <!-- dotnetcli -->
    <property name="lib.dotnetcli.basedir"
              value="dotnetcli-0.1.1" />
    <patternset id="lib.dotnetcli">
        <include name="${lib.dotnetcli.basedir}/dotnetcli-0.1.1.dll"/>
    </patternset>

    <!-- stylecop -->
    <property name="lib.stylecop.basedir"
              value="stylecop" />
    <patternset id="lib.stylecop">
        <include name="${lib.stylecop.basedir}/*.dll"/>
    </patternset>
    
    <!-- NAnt -->
    <property name="lib.nant.basedir"
              value="nant-0.86-beta1" />
    <patternset id="lib.nant">
        <include name="${lib.nant.basedir}/*.dll" />
    </patternset>"

    <!-- default includes -->
    <patternset id="lib.default">
        <patternset refid="lib.stylecop"/>
    </patternset>

    <!-- default test includes -->
    <patternset id="lib.test">
        <patternset refid="lib.nunit"/>
    </patternset>

    <!-- 
        project-specific incldes 
        
        individual projects can override this in order to include 
        project-specific dependencies
    -->
    <patternset id="lib.project" />

    <!--
        reference the required .net framework assemblies
    -->
    <patternset id="lib.dotnet.framework">
        <include name="${environment::get-variable('WinDir')}\Microsoft.NET\Framework\v2.0.50727\System.dll"/>
        <include name="${environment::get-variable('ProgramFiles')}\Reference Assemblies\Microsoft\Framework\v3.5\System.Core.dll"/>
        <include name="${environment::get-variable('WinDir')}\Microsoft.NET\Framework\v2.0.50727\System.Data.dll"/>
        <include name="${environment::get-variable('ProgramFiles')}\Reference Assemblies\Microsoft\Framework\v3.5\System.Data.DataSetExtensions.dll" />
        <include name="${environment::get-variable('WinDir')}\Microsoft.NET\Framework\v2.0.50727\System.Xml.dll" />
        <include name="${environment::get-variable('ProgramFiles')}\Reference Assemblies\Microsoft\Framework\v3.5\System.Xml.Linq.dll"/>
    </patternset>

    <!--
        a list of generated files that tools like ncover, ndepend,
        fxcop, stylecop, etc. should ignore
    -->
    <patternset id="src.generated">
        <include name="Properties/AssemblyInfo.cs"/>
        <include name="GlobalSuppressions.cs"/>
    </patternset>
    <!-- ******************************* LIB ******************************* -->
</project>