<?xml version="1.0" encoding="utf-8"?>

<!--
    NOTE 1
    make sure to include the default namespace so that visual studio
    will turn on intellisense for this nant build file 
    
    NOTE 2
    for non .NET developers: for all intents and purpose a solution in 
    VisualStudio (VS) is the same thing as a top-level project in most other
    languages, and VS project is the same as a package. in order to make it 
    easier for communicate amonst .NET developers working with both VS and
    NAnt, this NAnt build file will refer to the top-level project as a solution
    and packages as projects.
-->
<project xmlns="http://nant.sourceforge.net/release/latest/nant.xsd">
   
    <!-- 
        the unix (short) name of a project. this value should be overriden
        in a project's default properties file if the project is not the default 
        project for a solution, ex. a unit test project should append the
        '.Test' suffix to this value
    -->
    <if test="${string::ends-with(proj.name, sol.name)}">
        <property name="proj.name.unix"
                  value="${sol.name.unix}"/>
    </if>

    <!-- 
        contstruct the project's unix name by getting the part of its
        project name that occurs after the occurence of the solution name
        and then adding that to the solution name as a suffix. ex. if the
        solution name is vitfordotnet and the project name is 
        net.sf.vitfordotnet.test then this code will remove vitfordotnet from
        the project name leaving net.sf..test. then the code will key on the
        '..' occurrence and decide that the 'test' is the remainder and append
        it to the solution's name to result in vitfordotnet.test. thus the
        project name is vitfordotnet.test.
    -->
    <if test="${not string::ends-with(proj.name, sol.name)}">

        <!-- 
            remove the solution name from the project name. this will result
            in a double period (..) in the tmp1 variable, something we can key on
            to get the remainder of the string 
        -->
        <property name="tmp1"
                  value="${string::replace(proj.name, sol.name, '')}"/>

        <!-- get the index of the '..' in the string -->
        <property name="tmp2"
                  value="${string::index-of(tmp1, '..')}" />

        <!-- 
            do lots of string manipulation. see above comment for this section.
        -->
        <property name="proj.name.unix"
                  value="${sol.name}.${string::substring(tmp1, int::parse(tmp2)+2,string::get-length(tmp1)-int::parse(tmp2)-2)}"/>
    </if>

    <!-- the project description defaults to the solution description -->
    <property name="proj.description"
              value="${sol.description}"/>

    <!-- the project version defaults to the solution version -->
    <property name="proj.version"
              value="${sol.version}"/>

    <!-- the name of a unit test project's corresponding source project -->
    <property name="proj.srcproj.name"
              value="${string::replace(proj.name, '.Test', '')}"/>

    <!-- 
        the unix (short) name of a unit test project's corresponding source project 
    -->
    <property name="proj.srcproj.name.unix"
              value="${string::replace(proj.name.unix, '.Test', '')}"/>

    <!-- the path to a unit test project's corresponding source project -->
    <property name="proj.srcproj.path"
              value="../../${src}/${proj.srcproj.name}"/>

    <!-- 
        the path to a unit test project's corresponding source project's output
        assembly, xml documentation, and debug symbols.
    -->
    <property name="proj.srcproj.output"
              value="${proj.srcproj.path}/${build}/${proj.srcproj.name.unix}.*"/>

</project>